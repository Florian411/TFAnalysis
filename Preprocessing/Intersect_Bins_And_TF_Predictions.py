import sys
import os
import argparse
from sets import Set

#This script uses bedtools to intersect the TEPIC scores computed in DHS sites
#with the bins provided by the challenge organisers.
#Bedtools needs to be installed to run this script.
#
#
#arg1:Path to the folder containing TEPICs TF predictions processed with the Prepare_TEPIC_Output_For_Intersection.py script.
#arg2: Path to the file containing the balanced, labelled, Training regions generated by the script Split_and_Balance_ChIP-seq_TSV_files.py
#arg3: Path to the file containing the bins for the Leaderboard round as provided by the challenge organisers
#arg4: Path to the file containing the bins for the Test round as provided by the challenge organisers
#arg5: Output folder for the intersected files. Subfolders for Training, Leaderboard, and Test data are generated automatically.

def main():
	parser=argparse.ArgumentParser(prog="Intersect_Bins_And_TF_Predictions.py")
	parser.add_argument("TF_Predictions",nargs=1,help="Path to TEPIC TF predictions computed in DHS sites after reprocessing using the script Prepare_TEPIC_Output_For_Intersection.py")
	parser.add_argument("TrainingData",nargs=1,help="Path to the file containing the balanced, labelled, Training regions generated by the script Split_and_Balance_ChIP-seq_TSV_files.py")
	parser.add_argument("LeaderData",nargs=1,help="Path to the file containing the bins for the Leaderboard round as provided by the challenge organisers")
	parser.add_argument("TestData",nargs=1,help="Path to the file containing the bins for the Test round as provided by the challenge organisers")
	parser.add_argument("Destination",nargs=1,help="Path to write the intersected files to. Subfolders for Training, Leader, and Test data are generated automatically")
	args=parser.parse_args()

	TFPath=args.TF_Predictions[0]
	files=os.listdir(TFPath)
	tfs=Set()
	overlap=0.00000001
	for f in files:
		tfs.add(f.split("_")[0])

	#LeaderBoard Data
	outPath=str(args.Destination[0])+"Leaderboard/"
	command="mkdir "+str(outPath)
	os.system(command)
	for tf in tfs:
		for f in files:
			if (tf in f):
				if ("Affinity_Peak_Coverage.bed" in f):
					print("Intersecting Leaderboard data for "+f)
					command="intersectBed -b "+TFPath+f+" -a "+str(args.LeaderData[0])+" -loj -F "+str(overlap)+" | cut -f 4,5,6 --complement > affinity"+str(float(overlap)*100)+".temp"
					os.system(command)
					command="head -n 1 "+ TFPath+f+" > header"+str(float(overlap)*100)+".temp"
					os.system(command)
					command="cat header"+str(float(overlap)*100)+".temp affinity"+str(float(overlap)*100)+".temp > "+outPath+tf+"_Affinity_Peak_Coverage_"+str(float(overlap)*100)+"_Converted.txt"
					os.system(command)
					command="rm header"+str(float(overlap)*100)+".temp"
					os.system(command)
					command="rm affinity"+str(float(overlap)*100)+".temp"
					os.system(command)

	#Test Regions
	outPath=str(args.Destination[0])+"Test/"
	command="mkdir "+str(outPath)
	os.system(command)

	for tf in tfs:
		for f in files:
			if (tf in f):
				if ("Affinity_Peak_Coverage.bed" in f):
					print("Intersecting Test data for "+f)
					command="intersectBed -b "+TFPath+f+" -a "+str(args.TestData[0])+" -loj -F "+str(overlap)+" | cut -f 4,5,6 --complement > affinity"+str(float(overlap)*100)+".temp"
					os.system(command)
					command="head -n 1 "+ TFPath+f+" > header"+str(float(overlap)*100)+".temp"
					os.system(command)
					command="cat header"+str(float(overlap)*100)+".temp affinity"+str(float(overlap)*100)+".temp > "+outPath+tf+"_Affinity_Peak_Coverage_"+str(float(overlap)*100)+"_Converted.txt"
					os.system(command)
					command="rm header"+str(float(overlap)*100)+".temp"
					os.system(command)
					command="rm affinity"+str(float(overlap)*100)+".temp"
					os.system(command)
	#Training Data
	labelList=os.listdir(args.TrainingData[0])
	outPath=str(args.Destination[0])+"Training/"
	command="mkdir "+str(outPath)
	os.system(command)
	for tf in tfs:
		for f in files:
			if (tf in f):
				if ("Affinity_Peak_Coverage.bed" in f):
					for label in labelList:
						if (tf in label):
							print("Intersecting Training data for "+f+" with labels "+str(label))
							command="intersectBed -b "+TFPath+f+" -a "+ str(args.TrainingData[0]) +label+" -loj -F "+str(overlap)+" | cut -f 5,6,7 --complement > affinity"+str(float(overlap)*100)+".temp"
							os.system(command)
							command="head -n 1 "+ TFPath+f+" > header"+str(float(overlap)*100)+".temp"
							os.system(command)
							headerf=open("header"+str(float(overlap)*100)+".temp","r")
							s=headerf.readline().replace("#","").split()
							nheader="\t\t\tRespone"
							for element in s:
								nheader+="\t"+str(element)
							headerf.close()
							newfile=open("header"+str(float(overlap)*100)+".temp","w")
							newfile.write(nheader+'\n')
							newfile.close()
							command="cat header"+str(float(overlap)*100)+".temp affinity"+str(float(overlap)*100)+".temp > "+outPath+tf+"_"+label.split(".")[0]+"_Affinity_Peak_Coverage_"+str(float(overlap)*100)+"_Converted.txt"
							os.system(command)
							command="rm header"+str(float(overlap)*100)+".temp"
							os.system(command)
							command="rm affinity"+str(float(overlap)*100)+".temp"
							os.system(command)


main()
